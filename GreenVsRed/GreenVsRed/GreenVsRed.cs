using System;
using System.Linq;
using System.Xml;

class GreenVsRed
{

    static void Main(string[] args)
    {
        //grid parameters and number of generations
        int x = 0;
        int y = 0;
        int N = 0;

        Console.WriteLine("Enter the size of the grid you would like to get [x,y] x<=y<1000)");
        //checking if the input is in the constraints
        do
        {
            Console.Write("x =");
            x = CheckInput(x);

            Console.Write("y =");
            y = CheckInput(y);

            if (y>x)
            Console.WriteLine("Y should be smaller than X and smaller than 1000. Try again:");

        } while (y > x);

        int[,] array = new int[x, y];

        Grid grid;

        Console.WriteLine("If you wish to fill the Grid yourself, type \"0\". If you want the computer to autofill it, type \"1\"");

        //checking if the input is in the constraints
        int autoGeneratedArray = 0;
        autoGeneratedArray = CheckAnswerInput(autoGeneratedArray);
        if (autoGeneratedArray == 1)
        {
            Console.WriteLine("\nRandom generated array:\n");
            grid = new Grid(x, y);
        }
        else 
        {
            Console.WriteLine("\nFill the array with 0's and 1's (" + x + " numbers per row):");
            for (int i = 0; i < x; i++)
            {
                // waits for correct input for every row and assains it to the main array
                int[] digits = CheckArrayInput(x);
                for (int j = 0; j < y; j++)
                {
                    array[i, j] = digits[j];
                }
            }
            grid = new Grid(x, y, array);
        }

        //the cordinates we want to keep track of
        int row = 0;
        int col = 0;

        Console.WriteLine("\nEnter the coordinates [row,col] of the cell in the grid, which you would like to calculate.");
        Console.Write("row =");
        row = CheckInput(row);
        if (row>x)
        {
            Console.WriteLine("Input out of grid scale(x,y). Try again:");
            row = CheckInput(row);
        }

        Console.Write("col =");
        col = CheckInput(col);
        if (col > y)
        {
            Console.WriteLine("Input out of grid scale(x,y). Try again:");
            col = CheckInput(col);
        }

        grid.AssignCordinates(row, col);

        Console.WriteLine("\nEnter the amout of Generations you would like to calculate");
        N = CheckInput(N);
        grid.Simulate(N);


        Console.WriteLine("The number of times [" + row + "," + col + "] was green in " + N + " Generations is: " + grid.Count);
    }

    /// <summary>
    /// checks if input is a int and if its a 1 or 0 
    /// </summary>
    public static int CheckAnswerInput(int input)
    {
        while (!int.TryParse(Console.ReadLine(), out input))
        {
            Console.WriteLine("That was an invalid input. Enter a valid positive number).");
            Console.Write("Try again:");
        }
        if (input > 1 || input < 0)
        {
            Console.WriteLine("That was an invalid input. Enter a valid positive number).");
            Console.Write("Try again:");
            input = CheckAnswerInput(input);
        }
        return input;
    }

    /// <summary>
    /// checks if the input is a number and if its in the right span
    /// </summary>
    public static int CheckInput(int input)
    {
        while (!int.TryParse(Console.ReadLine(), out input))
        {
            Console.WriteLine("That was an invalid input. Enter a valid positive number).");
            Console.Write("Try again:");
        }
        if (input < 0 || input >=1000)
        {
            Console.WriteLine("That was an invalid input. Enter a valid positive number).");
            Console.Write("Try again:");
            input = CheckInput(input);
        }
        return input;
    }

    /// <summary>
    /// takes input and checks if its the correct length and type
    /// </summary>
    public static int[] CheckArrayInput(int x)
    {
        string arrayInput = "";
        
        int[] digits;
        arrayInput = Console.ReadLine();

        //checks if the length is correct and if there are other characters than digits
        if (arrayInput.Length != x || !IsAllDigits(arrayInput))
        {
            Console.WriteLine("Input was longer/shorter than inteded or there was a wrong character. Try again:");
            digits = CheckArrayInput(x);
        }
        
        digits = arrayInput.Select(c => Convert.ToInt32(c.ToString())).ToArray();

        //checks if each element is a 1 or a 0  
        for (int i = 0; i < digits.Length; i++)
        {
            if (digits[i] != 0 && digits[i] != 1)
            {
                Console.WriteLine("Input was longer/shorter than inteded or there was a wrong character. Try again:");
                digits = CheckArrayInput(x);
            }
        }
        return digits;
    }

    /// <summary>
    /// function that checks if there are characters other than digits in a string and returns true/false
    /// </summary>
    public static bool IsAllDigits(string s)
    {
        foreach (char c in s)
        {
            if (!char.IsDigit(c))
                return false;
        }
        return true;
    }
}

